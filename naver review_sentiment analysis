import pandas as pd
import re
import warnings
warnings.filterwarnings(action='ignore')
from konlpy.tag import Okt
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import GridSearchCV

# 훈련용 데이터 준비 
nsmc_train_df = pd.read_csv('ratings_train.txt', encoding='utf8', sep='\t', engine='python')
nsmc_train_df = nsmc_train_df[nsmc_train_df['document'].notnull()]
nsmc_train_df['document'] = nsmc_train_df['document'].apply(lambda x : re.sub(r'[^ㄱ-ㅣ가-힣]+', " ", x))

# 평가용 데이터 준비
nsmc_test_df = pd.read_csv('ratings_test.txt', encoding='utf8', sep='\t', engine='python')
nsmc_test_df = nsmc_test_df[nsmc_test_df['document'].notnull()]
nsmc_test_df['document'] = nsmc_test_df['document'].apply(lambda x: re.sub(r'[^-|가-힣]+'," ",x))

# 특성 벡터화 작업
okt = Okt()
def okt_tokenizer(text):
    tokens = okt.morphs(text)
    return tokens
tfidf = TfidfVectorizer(tokenizer = okt_tokenizer, ngram_range = (1,2), min_df=3, max_df=0.9)
tfidf.fit(nsmc_train_df['document'])
nsmc_train_tfidf = tfidf.transform(nsmc_train_df['document'])

# 감성분류 모델 구축
SA_lr = LogisticRegression(random_state=0)
SA_lr.fit(nsmc_train_tfidf, nsmc_train_df['label'])

params = {'C' : [1,3,3.5,4,4.5,5]}
SA_lr_grid_cv = GridSearchCV(SA_lr, param_grid = params, cv=3, scoring='accuracy', verbose=1)
SA_lr_grid_cv.fit(nsmc_train_tfidf, nsmc_train_df['label'])
SA_lr_best = SA_lr_grid_cv.best_estimator_


from collections import defaultdict
import pandas as pd



def check_dataset(dataset):
    df = pd.read_csv(dataset)
    df = df[df['REVIEW'].notnull()]  # 결측치 제거

    review_list = list()

    for date, review in zip(df['DATE'], df['REVIEW']):
        review_list.append([date, review])
            
    #print(data_list)

    return review_list
    

def set_date(date):
    date_arr = date.split(".")  # date 문자열 분리

    # date_arr의 길이가 4면 2021년이 아님
    if len(date_arr) == 4:   
        year, month = date_arr[0], date_arr[1]
    # 21년도 리뷰에는 연도가 안적혀 있으므로 연도 부여
    else:
        year, month = 21, date_arr[0]

    return year, month

def park_review(year, month, review_flag):
    if not dict[int(year)]:
        dict[int(year)] = list([0,0] for i in range(0, 12))
        dict[int(year)][int(month)-1][review_flag]+=1
    else:
        dict[int(year)][int(month) - 1][review_flag] += 1
        

if __name__ == '__main__':
    dict = defaultdict(list)

    review_list = check_dataset("test 리뷰3500.csv")

    for date, review in review_list:
        year, month = set_date(date)
        st = review
    
        st = re.compile(r'[ㄱ-ㅣ가-힣]+').findall(st)  # 입력 텍스트 전처리 수행
        st = [" ".join(st)]  
    
        st_tfidf = tfidf.transform(st)  # 입력 텍스트 피처 벡터화
        st_predict = SA_lr_best.predict(st_tfidf)  # 감성 분석 평가
        
        park_review(year, month, int(st_predict))

    print(dict)
    
    
# 딕셔너리 저장    
import pickle

with open('dict.pickle', 'wb') as fw:
    pickle.dump(dict, fw)
    
    
    
#  막대그래프 생성
import matplotlib.pyplot as plt

month_list = []
for i in range(0,12):
    month_list.append(i+1)
  
for year in range(len(dict)):    
    neg_list = []
    pos_list = []
    fig, ax = plt.subplots()
    
    for i in range(len(dict[21])):
        neg_list.append(dict[21-year][i][0])
        pos_list.append(dict[21-year][i][1])
     

    plt.bar(month_list, neg_list, width =0.8, color='green', alpha= 1, label='negative')
    plt.bar(month_list, pos_list, width =0.8, color='pink', alpha= 0.4, label='positive')

    plt.title('%s'%str(21-year))
    plt.ylabel('count', fontsize=12)
    plt.xlabel('month', fontsize=12)
    

    plt.grid(axis='y',linestyle='--',alpha=0.5)
    plt.legend(fontsize=10, loc='upper left')
